<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CS144-5</title>
      <link href="/posts/d466e783.html"/>
      <url>/posts/d466e783.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS144-4</title>
      <link href="/posts/a361d715.html"/>
      <url>/posts/a361d715.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS144-3</title>
      <link href="/posts/3d0542b6.html"/>
      <url>/posts/3d0542b6.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS144-2</title>
      <link href="/posts/4a027220.html"/>
      <url>/posts/4a027220.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS144-1</title>
      <link href="/posts/d30b239a.html"/>
      <url>/posts/d30b239a.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CS144-0</title>
      <link href="/posts/a40c130c.html"/>
      <url>/posts/a40c130c.html</url>
      
        <content type="html"><![CDATA[<h1 id="CS144-0"><a href="#CS144-0" class="headerlink" title="CS144-0"></a>CS144-0</h1><p>由于没有学校的邮箱，前面虚拟机交流也很简单，直接从代码发送阶段开始。<br><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>1.编写报文</strong><br>实验步骤：</p><p>在你的虚拟机上，获取实验的源代码: <code>git clone https://github.com/cs144/minnow</code></p><p>进入 Lab 0 目录: <code>cd minnow</code></p><p>创建一个目录来编译实验室软件: <code>cmake -S . -B build</code></p><p>编译源代码: <code>cmake --build build</code></p><p>在构建目录外部，打开并开始编辑 <code>writeups/check 0. Md 文件。</code></p><p>在文件 <code>../apps/webget. cc</code> 中，找到并实现 get_URL 函数。你需要使用 HTTP 协议，使用 TCPSocket 和 Address 类。<br><span class='p red'>这里会出现的问题是克隆GitHub库的时候，由于网络问题克隆不了，建议多尝试，不推荐直接从GitHub库下载后导入虚拟机，因为后续需要同步新的实验，会由于git库的归属问题，导致无法同步。</span></p><p>做这一部分以前，要先有Http报文的前置知识，了解整个http的报文结构，才能完成这一部分的实验</p></div><div class="tab-item-content" id="test1-2"><p><strong>知识点</strong><br><a class="btn-anzhiyu " href="https://cdn.jsdelivr.net/gh/huanxueshengmou/picture-host/87812_FUF8PO1PX9DM3E-1024x639.png"   title=""><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i></a><br><a class="btn-anzhiyu " href="https://cdn.jsdelivr.net/gh/huanxueshengmou/picture-host/MMWT9GZ0MBZEGUC073KU-1024x334.png"   title=""><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i></a></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></p><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>1.1发送get报文</strong><br>在这个实验中，只需要发送最简单的GET报文请求即可，即写一段字符串，包含GET，HTTP类型，Host接口，以及最后的连接关闭。</p><p>这部分代码并不难，我会放在文章的末尾，在此之前如果你只是过来看思路，可以自己先思考一下，需要注意的是每一个元素之间需要有一个空格以及最后也需要一个换行，细节上需要去留意。</p><p>之后我们在控制台make我们的代码</p></div><div class="tab-item-content" id="test1-2"><p><strong>测试</strong><br>通过运行 <code>./apps/webget cs144.keithw.org /hello</code> 来测试程序。你可以实验不同的 http URL。比如说 <code>./apps/webget www.baidu.com /hello</code><br><a class="btn-anzhiyu " href="https://cdn.jsdelivr.net/gh/huanxueshengmou/picture-host/PQWU7GDORQ_039M@F1L-1024x450.png"   title=""><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i></a></p></div><div class="tab-item-content" id="test1-3"><p><strong>自动化测试</strong><br>然后运行 <code>cmake --build build --target check_webget</code> 进行自动测试。<br><a class="btn-anzhiyu " href="https://cdn.jsdelivr.net/gh/huanxueshengmou/picture-host/NXXCAKXEKMW6DLM465-1024x428.png"   title=""><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i></a></p><p>当看到两个测试用例通过，代表你可以继续下一步的实验了，打开 <code>src/byte stream.hh</code> 和 <code>src/byte stream.cc</code> 文件，实现给定接口的对象。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>2.实现字节系统</strong><br>我提供一些简单的接口描述</p><div class='checkbox'><input type="checkbox" />            <p>void push( std::string data ); // 将数据推入流中，但只推入可用容量的数据。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>void close(); // 表示流已经结束，不会有更多数据写入。; // 将数据推入流中，但只推入可用容量的数据。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>void set_error(); // 表示流出现错误。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>bool is_closed() const; // 判断流是否已关闭。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>uint64_t available_capacity() const; // 当前可以推入流的字节数。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>uint64_t bytes_pushed() const; // 已推入流的总字节数。</p>            </div># 读取者接口：<div class='checkbox'><input type="checkbox" />            <p>void pop( uint64_t len ); // 从缓冲区移除 len 字节。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>bool is_finished() const; // 判断流是否已完成（关闭并完全弹出）。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>bool has_error() const; // 判断流是否发生过错误。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>uint64_t bytes_buffered() const; // 当前缓冲的字节数量（推入但尚未弹出的）。</p>            </div><div class='checkbox'><input type="checkbox" />            <p>uint64_t bytes_popped() const; // 已从流中弹出的总字节数。</p>            </div><p>这一部分我总体的实现思路是，直接通过原生的string作为buffer，然后通过设置一些变量在头文件中记录状态，比如poped函数就可以直接返回这些状态。具体代码我会放在文末，或者您可以访问我的GitHub，来获得代码。</p><p>然后通过使用 <code>cmake --build build --target check0</code> 命令运行自动化测试。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>代码</strong></p><h3 id="webget-cc"><a href="#webget-cc" class="headerlink" title="webget.cc"></a>webget.cc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;socket.hh&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;random&gt;</span><br><span class="line">#include &lt;span&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">vector&lt;string&gt;MoreRequest;</span><br><span class="line">void get_URL( const string&amp; host, const string&amp; path )</span><br><span class="line">&#123;   </span><br><span class="line">      Address addr(host,&quot;http&quot;);</span><br><span class="line">      TCPSocket tcp_socket;//建立套接字，用来连接（有了插坐）</span><br><span class="line"> try&#123;</span><br><span class="line">        tcp_socket.connect(addr);</span><br><span class="line">    &#125;</span><br><span class="line">    catch ( const exception&amp; e ) &#123;</span><br><span class="line">    cerr &lt;&lt; &quot;Unable to connect:&quot;&lt;&lt;e.what() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    return ;</span><br><span class="line">  &#125;</span><br><span class="line">    string DefaultRequest=&quot;GET&quot;;</span><br><span class="line">    string ConnectionHead = &quot;Close&quot;;</span><br><span class="line">    string CacheControlHead=&quot;no-cache&quot;;</span><br><span class="line">        if(!MoreRequest.empty())&#123;</span><br><span class="line">        for(string &amp;str:MoreRequest)&#123;</span><br><span class="line">        CacheControlHead+=(&quot;,&quot;+str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string RequestHead(</span><br><span class="line">    DefaultRequest+&quot; &quot;+path+ &quot; HTTP/1.1\r\n&quot; );</span><br><span class="line">    RequestHead+=&quot;Host: &quot; + host+ &quot;\r\n&quot;;</span><br><span class="line">    RequestHead+=&quot;Cache-Control: &quot; + CacheControlHead + &quot;\r\n&quot;;</span><br><span class="line">    RequestHead+=&quot;Connection: &quot; + ConnectionHead + &quot;\r\n\r\n&quot;;</span><br><span class="line">    tcp_socket.write(RequestHead);</span><br><span class="line">    string outinfo;</span><br><span class="line">  tcp_socket.read( outinfo );</span><br><span class="line">  while ( !outinfo.empty() ) &#123;</span><br><span class="line">    cout &lt;&lt; outinfo;</span><br><span class="line">    tcp_socket.read( outinfo );</span><br><span class="line">  &#125;</span><br><span class="line">    tcp_socket.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main( int argc, char* argv[] )</span><br><span class="line">&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if ( argc &lt;= 0 ) &#123;</span><br><span class="line">      abort(); // For sticklers: don&#x27;t try to access argv[0] if argc &lt;= 0.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto args = span( argv, argc );</span><br><span class="line"></span><br><span class="line">    // The program takes two command-line arguments: the hostname and &quot;path&quot; part of the URL.</span><br><span class="line">    // Print the usage message unless there are these two arguments (plus the program name</span><br><span class="line">    // itself, so arg count = 3 in total).</span><br><span class="line">    if ( argc != 3 ) &#123;</span><br><span class="line">      cerr &lt;&lt; &quot;Usage: &quot; &lt;&lt; args.front() &lt;&lt; &quot; HOST PATH\n&quot;;</span><br><span class="line">      cerr &lt;&lt; &quot;\tExample: &quot; &lt;&lt; args.front() &lt;&lt; &quot; stanford.edu /class/cs144\n&quot;;</span><br><span class="line">      return EXIT_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Get the command-line arguments.</span><br><span class="line">    const string host &#123; args[1] &#125;;</span><br><span class="line">    const string path &#123; args[2] &#125;;</span><br><span class="line"></span><br><span class="line">    // Call the student-written function.</span><br><span class="line">    get_URL( host, path );</span><br><span class="line">  &#125; catch ( const exception&amp; e ) &#123;</span><br><span class="line">    cerr &lt;&lt; e.what() &lt;&lt; &quot;\n&quot;;</span><br><span class="line">    return EXIT_FAILURE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-2"><h3 id="bytestream-cc"><a href="#bytestream-cc" class="headerlink" title="bytestream.cc"></a>bytestream.cc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdexcept&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;byte_stream.hh&quot;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">ByteStream::ByteStream( uint64_t capacity ) : capacity_( capacity ) &#123;&#125;</span><br><span class="line">static  size_t SHUT_RDWR=2;</span><br><span class="line">void Writer::push( string data )</span><br><span class="line">&#123;</span><br><span class="line">  if(this-&gt;ByteStreamState==SHUT_RDWR)&#123;</span><br><span class="line">  set_error();</span><br><span class="line">  return;</span><br><span class="line">  &#125;</span><br><span class="line">  uint64_t datasize(data.size());</span><br><span class="line">  if(this-&gt;headroom_&lt;datasize)&#123;</span><br><span class="line">  set_error();</span><br><span class="line">  datasize=this-&gt;headroom_;</span><br><span class="line">  data.resize(datasize);</span><br><span class="line">  &#125;</span><br><span class="line">  this-&gt;buffer+=data;</span><br><span class="line">  this-&gt;buffered+=datasize;</span><br><span class="line">  this-&gt;pushed+=datasize;</span><br><span class="line">  this-&gt;headroom_-=datasize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Writer::close()</span><br><span class="line">&#123;</span><br><span class="line">  if(this-&gt;ByteStreamState==SHUT_RDWR)&#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  this-&gt;ByteStreamState=SHUT_RDWR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Writer::set_error()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  // unsigned int WriteOFF_0</span><br><span class="line">  // unsigned int Overflow_1</span><br><span class="line">  // unsigned int ReadOFF_2</span><br><span class="line">  this-&gt;errorsize++;</span><br><span class="line">  // string WriteOFF=&quot;Unable to write because write has been turned off&quot;;</span><br><span class="line">  // string Overflow=&quot;Data exceeds the maximum limit&quot;;</span><br><span class="line">  // string ReadOFF=&quot;Unable to read because read has been turned off&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Writer::is_closed() const</span><br><span class="line">&#123;</span><br><span class="line"> if(this-&gt;ByteStreamState==SHUT_RDWR)&#123;</span><br><span class="line">  return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint64_t Writer::available_capacity() const</span><br><span class="line">&#123;</span><br><span class="line">  return this-&gt;headroom_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint64_t Writer::bytes_pushed() const</span><br><span class="line">&#123;</span><br><span class="line">  return this-&gt;pushed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string_view Reader::peek() const</span><br><span class="line">&#123;</span><br><span class="line">  return std::string_view(this-&gt;buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Reader::is_finished() const</span><br><span class="line">&#123;</span><br><span class="line">   if(this-&gt;ByteStreamState==SHUT_RDWR&amp;&amp;buffered==0)&#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Reader::has_error() const</span><br><span class="line">&#123;</span><br><span class="line">  if(this-&gt;errorsize!=0)&#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">  return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Reader::pop( uint64_t len )</span><br><span class="line">&#123;</span><br><span class="line">  if(len&lt;1)&#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  else if(len&gt;this-&gt;buffered)</span><br><span class="line">  &#123;</span><br><span class="line">    len=this-&gt;buffered;</span><br><span class="line">  &#125;</span><br><span class="line">   this-&gt;buffer.erase(0, len);</span><br><span class="line">   this-&gt;buffered-=len;</span><br><span class="line">   this-&gt;headroom_+=len;</span><br><span class="line">   this-&gt;poped+=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint64_t Reader::bytes_buffered() const</span><br><span class="line">&#123;</span><br><span class="line">  return this-&gt;buffered;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint64_t Reader::bytes_popped() const</span><br><span class="line">&#123;</span><br><span class="line">  return this-&gt;poped;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="test1-3"><h3 id="bytestream-hh"><a href="#bytestream-hh" class="headerlink" title="bytestream.hh"></a>bytestream.hh</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stdexcept&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;string_view&gt;</span><br><span class="line"></span><br><span class="line">class Reader;</span><br><span class="line">class Writer;</span><br><span class="line"></span><br><span class="line">class ByteStream</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">  unsigned int errorsize=0;</span><br><span class="line">  uint64_t capacity_;</span><br><span class="line">  uint64_t buffered=0;</span><br><span class="line">  uint64_t pushed=0;</span><br><span class="line">  uint64_t poped=0;</span><br><span class="line">  uint64_t headroom_=capacity_;</span><br><span class="line">  std::string buffer&#123;&#125;;</span><br><span class="line">  size_t ByteStreamState=4;</span><br><span class="line">  // Please add any additional state to the ByteStream here, and not to the Writer and Reader interfaces.</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">  explicit ByteStream( uint64_t capacity );</span><br><span class="line"></span><br><span class="line">  // Helper functions (provided) to access the ByteStream&#x27;s Reader and Writer interfaces</span><br><span class="line">  Reader&amp; reader();</span><br><span class="line">  const Reader&amp; reader() const;</span><br><span class="line">  Writer&amp; writer();</span><br><span class="line">  const Writer&amp; writer() const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Writer : public ByteStream</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  void push( std::string data ); // Push data to stream, but only as much as available capacity allows.</span><br><span class="line"></span><br><span class="line">  void close();     // Signal that the stream has reached its ending. Nothing more will be written.</span><br><span class="line">  void set_error(); // Signal that the stream suffered an error.</span><br><span class="line"></span><br><span class="line">  bool is_closed() const;              // Has the stream been closed?</span><br><span class="line">  uint64_t available_capacity() const; // How many bytes can be pushed to the stream right now?</span><br><span class="line">  uint64_t bytes_pushed() const;       // Total number of bytes cumulatively pushed to the stream</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Reader : public ByteStream</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  std::string_view peek() const; // Peek at the next bytes in the buffer</span><br><span class="line">  void pop( uint64_t len );      // Remove `len` bytes from the buffer</span><br><span class="line"></span><br><span class="line">  bool is_finished() const; // Is the stream finished (closed and fully popped)?</span><br><span class="line">  bool has_error() const;   // Has the stream had an error?</span><br><span class="line"></span><br><span class="line">  uint64_t bytes_buffered() const; // Number of bytes currently buffered (pushed and not popped)</span><br><span class="line">  uint64_t bytes_popped() const;   // Total number of bytes cumulatively popped from stream</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * read: A (provided) helper function thats peeks and pops up to `len` bytes</span><br><span class="line"> * from a ByteStream Reader into a string;</span><br><span class="line"> */</span><br><span class="line">void read( Reader&amp; reader, uint64_t len, std::string&amp; out );</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS144 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS144前言</title>
      <link href="/posts/db34f9f3.html"/>
      <url>/posts/db34f9f3.html</url>
      
        <content type="html"><![CDATA[<div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>CS144 - 前言</strong><br>在我开始深入CS144这门课程之前，我必须先声明一下 —— 我并非什么大佬。实际上，我在网络系统这方面的旅程才刚刚开始，有时候，我自己也还在为之前的认知感到惊讶。毕竟，将书本知识转化为可以在真实世界中运行的代码是一条充满挑战的路。我分享的内容，可能不见得是行业内的最优解，但至少代表了我的一点小小见解，希望能给你提供一些不同的思考角度。</p></div><div class="tab-item-content" id="test1-2"><p><strong>小声逼逼</strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/huanxueshengmou/picture-host/d9f7af772a7bd52f9f904d06899f5d151788e195.jpg@1256w_1256h_!web-article-pic.avif" alt="说白了，别嫌我太菜。"/></div><span class="image-caption">说白了，别嫌我太菜。</span></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>原地址</strong><br>好，正题来了，这是CS144课程的官方链接<a class="btn-anzhiyu " href="https://cs144.github.io/"   title="CS144"><span>CS144</span></a> 强烈推荐给像我一样对网络系统感兴趣的朋友们。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>心路历程(废话 busi)</strong><br>开始实操这门课的项目时，我真的遇到了不少的阻力。以前我更多的是书面上的学习，对概念和理论比较了解，但在动手实现它们的时候，突然间好像有一面墙立在了我的面前，让我手足无措，反反复复在文档与之前学过的知识对照，又双叒叕地与bug和失败结果打交道。程序员嘛，谁没有过在编译器前哭泣的时候呢？</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>有所所获</strong><br>这个过程中，我学到了很多东西——不仅仅是知识上的收获，更多的是在面对问题和困难时，如何保持冷静，如何一步步地解决问题。我不得不说，这些经验是十分宝贵的，它们磨练了我的耐心和毅力，也让我对计算机网络的理解更加深刻。</p></div><div class="tab-item-content" id="test1-2"><p><strong>持续进步</strong><br>在不断的尝试和失败中，我领悟到了计算机网络的复杂性，也见证了代码的力量。每一次debug，每一次代码的修改，都让我对初看起来高不可攀的网络协议有了一点点新的理解。通过实际编写和实现代码，我开始真正感受到了协议之间的美妙互动和逻辑上的严谨性。</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>讲给你们</strong><br>我希望可以把这份乐趣和收获分享给每一个读到这篇博客的你。不管你现在是一个处于编程起步阶段的新手，还是一直在寻找新知和挑战的资深开发者，我都相信CS144能给你带来一些新的启发。别忘了，最好的学习方式，往往是直接跳进来，动手去做，去体验，像游泳一样，旱地学泳是不可以的，拘泥于书本也是不可以的。</p><p>所以，让我们一起继续这趟探索之旅吧。接下来的篇章，我会深入分享我在实现CS144项目中的具体经历和收获。希望我的旅程可以给你带来一些帮助，也期待听到你的故事和成长。别怕起步难，我们都在这条路上！</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><p>以下是中文文档，你可以通过中英来更好的理解文档。</p><a class="btn-anzhiyu " href="https://huanxue.love/230-2/"   title="旧站文档"><i class="anzhiyufont anzhiyu-icon-circle-arrow-right"></i><span>旧站文档</span></a>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS144 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloword</title>
      <link href="/posts/534e3aec.html"/>
      <url>/posts/534e3aec.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
